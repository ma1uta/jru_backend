# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
from backend import util


class Feedback(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, email: str=None, message: str=None, captcha: str=None):  # noqa: E501
        """Feedback - a model defined in Swagger

        :param email: The email of this Feedback.  # noqa: E501
        :type email: str
        :param message: The message of this Feedback.  # noqa: E501
        :type message: str
        :param captcha: The captcha of this Feedback.  # noqa: E501
        :type captcha: str
        """
        self.swagger_types = {
            'email': str,
            'message': str,
            'captcha': str
        }

        self.attribute_map = {
            'email': 'email',
            'message': 'message',
            'captcha': 'captcha'
        }
        self._email = email
        self._message = message
        self._captcha = captcha

    @classmethod
    def from_dict(cls, dikt) -> 'Feedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Feedback of this Feedback.  # noqa: E501
        :rtype: Feedback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self) -> str:
        """Gets the email of this Feedback.


        :return: The email of this Feedback.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Feedback.


        :param email: The email of this Feedback.
        :type email: str
        """

        self._email = email

    @property
    def message(self) -> str:
        """Gets the message of this Feedback.


        :return: The message of this Feedback.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Feedback.


        :param message: The message of this Feedback.
        :type message: str
        """

        self._message = message

    @property
    def captcha(self) -> str:
        """Gets the captcha of this Feedback.


        :return: The captcha of this Feedback.
        :rtype: str
        """
        return self._captcha

    @captcha.setter
    def captcha(self, captcha: str):
        """Sets the captcha of this Feedback.


        :param captcha: The captcha of this Feedback.
        :type captcha: str
        """

        self._captcha = captcha
