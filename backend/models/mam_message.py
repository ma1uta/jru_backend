# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
from backend import util


class MAMMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ts: int=None, bare_peer: str=None, id: str=None, kind: str=None, nick: str=None, txt: str=None, xml: str=None, direction: str=None):  # noqa: E501
        """MAMMessage - a model defined in Swagger

        :param ts: The ts of this MAMMessage.  # noqa: E501
        :type ts: int
        :param bare_peer: The bare_peer of this MAMMessage.  # noqa: E501
        :type bare_peer: str
        :param id: The id of this MAMMessage.  # noqa: E501
        :type id: str
        :param kind: The kind of this MAMMessage.  # noqa: E501
        :type kind: str
        :param nick: The nick of this MAMMessage.  # noqa: E501
        :type nick: str
        :param txt: The txt of this MAMMessage.  # noqa: E501
        :type txt: str
        :param xml: The xml of this MAMMessage.  # noqa: E501
        :type xml: str
        :param direction: The direction of this MAMMessage.  # noqa: E501
        :type direction: str
        """
        self.swagger_types = {
            'ts': int,
            'bare_peer': str,
            'id': str,
            'kind': str,
            'nick': str,
            'txt': str,
            'xml': str,
            'direction': str
        }

        self.attribute_map = {
            'ts': 'ts',
            'bare_peer': 'bare_peer',
            'id': 'id',
            'kind': 'kind',
            'nick': 'nick',
            'txt': 'txt',
            'xml': 'xml',
            'direction': 'direction'
        }
        self._ts = ts
        self._bare_peer = bare_peer
        self._id = id
        self._kind = kind
        self._nick = nick
        self._txt = txt
        self._xml = xml
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt) -> 'MAMMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MAMMessage of this MAMMessage.  # noqa: E501
        :rtype: MAMMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ts(self) -> int:
        """Gets the ts of this MAMMessage.


        :return: The ts of this MAMMessage.
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts: int):
        """Sets the ts of this MAMMessage.


        :param ts: The ts of this MAMMessage.
        :type ts: int
        """

        self._ts = ts

    @property
    def bare_peer(self) -> str:
        """Gets the bare_peer of this MAMMessage.


        :return: The bare_peer of this MAMMessage.
        :rtype: str
        """
        return self._bare_peer

    @bare_peer.setter
    def bare_peer(self, bare_peer: str):
        """Sets the bare_peer of this MAMMessage.


        :param bare_peer: The bare_peer of this MAMMessage.
        :type bare_peer: str
        """

        self._bare_peer = bare_peer

    @property
    def id(self) -> str:
        """Gets the id of this MAMMessage.


        :return: The id of this MAMMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MAMMessage.


        :param id: The id of this MAMMessage.
        :type id: str
        """

        self._id = id

    @property
    def kind(self) -> str:
        """Gets the kind of this MAMMessage.


        :return: The kind of this MAMMessage.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this MAMMessage.


        :param kind: The kind of this MAMMessage.
        :type kind: str
        """

        self._kind = kind

    @property
    def nick(self) -> str:
        """Gets the nick of this MAMMessage.


        :return: The nick of this MAMMessage.
        :rtype: str
        """
        return self._nick

    @nick.setter
    def nick(self, nick: str):
        """Sets the nick of this MAMMessage.


        :param nick: The nick of this MAMMessage.
        :type nick: str
        """

        self._nick = nick

    @property
    def txt(self) -> str:
        """Gets the txt of this MAMMessage.


        :return: The txt of this MAMMessage.
        :rtype: str
        """
        return self._txt

    @txt.setter
    def txt(self, txt: str):
        """Sets the txt of this MAMMessage.


        :param txt: The txt of this MAMMessage.
        :type txt: str
        """

        self._txt = txt

    @property
    def xml(self) -> str:
        """Gets the xml of this MAMMessage.


        :return: The xml of this MAMMessage.
        :rtype: str
        """
        return self._xml

    @xml.setter
    def xml(self, xml: str):
        """Sets the xml of this MAMMessage.


        :param xml: The xml of this MAMMessage.
        :type xml: str
        """

        self._xml = xml

    @property
    def direction(self) -> str:
        """Gets the direction of this MAMMessage.


        :return: The direction of this MAMMessage.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this MAMMessage.


        :param direction: The direction of this MAMMessage.
        :type direction: str
        """

        self._direction = direction
