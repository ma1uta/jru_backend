# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
from backend import util


class RegisterEmail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, captcha: str=None, login: str=None, email: str=None, phone: str=None):  # noqa: E501
        """RegisterEmail - a model defined in Swagger

        :param captcha: The captcha of this RegisterEmail.  # noqa: E501
        :type captcha: str
        :param login: The login of this RegisterEmail.  # noqa: E501
        :type login: str
        :param email: The email of this RegisterEmail.  # noqa: E501
        :type email: str
        :param phone: The phone of this RegisterEmail.  # noqa: E501
        :type phone: str
        """
        self.swagger_types = {
            'captcha': str,
            'login': str,
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'captcha': 'captcha',
            'login': 'login',
            'email': 'email',
            'phone': 'phone'
        }
        self._captcha = captcha
        self._login = login
        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterEmail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegisterEmail of this RegisterEmail.  # noqa: E501
        :rtype: RegisterEmail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def captcha(self) -> str:
        """Gets the captcha of this RegisterEmail.


        :return: The captcha of this RegisterEmail.
        :rtype: str
        """
        return self._captcha

    @captcha.setter
    def captcha(self, captcha: str):
        """Sets the captcha of this RegisterEmail.


        :param captcha: The captcha of this RegisterEmail.
        :type captcha: str
        """
        if captcha is None:
            raise ValueError("Invalid value for `captcha`, must not be `None`")  # noqa: E501

        self._captcha = captcha

    @property
    def login(self) -> str:
        """Gets the login of this RegisterEmail.


        :return: The login of this RegisterEmail.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login: str):
        """Sets the login of this RegisterEmail.


        :param login: The login of this RegisterEmail.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def email(self) -> str:
        """Gets the email of this RegisterEmail.


        :return: The email of this RegisterEmail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RegisterEmail.


        :param email: The email of this RegisterEmail.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this RegisterEmail.


        :return: The phone of this RegisterEmail.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this RegisterEmail.


        :param phone: The phone of this RegisterEmail.
        :type phone: str
        """

        self._phone = phone
